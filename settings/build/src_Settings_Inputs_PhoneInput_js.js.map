{"version":3,"file":"src_Settings_Inputs_PhoneInput_js.js","mappings":";;;;;;;;;;;;;;;;;;;AAAgD;AAC1B;AAEtB,MAAMG,UAAU,GAAGC,IAAA,IAQb;EAAA,IARc;IACnBC,KAAK;IACLC,QAAQ;IACRC,OAAO;IACPC,QAAQ;IACRC,QAAQ;IACRC,EAAE;IACFC;EACD,CAAC,GAAAP,IAAA;EACA,MAAMQ,OAAO,GAAGF,EAAE,IAAIC,IAAI;EAC1B,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGZ,+CAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMa,YAAY,GAAIC,MAAM,IAAK;IAChC,IAAIC,GAAG,GAAGD,MAAM,CAACE,KAAK,CAAC,oBAAoB,CAAC;IAC5C,OAAQD,GAAG,KAAK,IAAI;EACrB,CAAC;;EAED;EACAhB,gDAAS,CAAC,MAAM;IACf,IAAI,CAACI,KAAK,EAAEA,KAAK,GAAG,EAAE;IACtBS,aAAa,CAACT,KAAK,CAAC;EACrB,CAAC,EAAC,EAAE,CAAC;;EAEL;EACAJ,gDAAS,CAAC,MAAM;IACf,MAAMkB,WAAW,GAAGC,UAAU,CAAC,MAAM;MACpCd,QAAQ,CAACO,UAAU,CAAC;MACpB,IAAI,CAACE,YAAY,CAACF,UAAU,CAAC,EAAE;QAC9BN,OAAO,CAAC,eAAe,CAAC;MACzB;IACD,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MACZc,YAAY,CAACF,WAAW,CAAC;IAC1B,CAAC;EACF,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC;EAEhB,MAAMS,YAAY,GAAKjB,KAAK,IAAM;IACjCS,aAAa,CAACT,KAAK,CAAC;EACrB,CAAC;EAED,OACCkB,iEAAA;IAAKC,SAAS,EAAC;EAA2C,GACzDD,iEAAA;IACCE,IAAI,EAAC,KAAK;IACVf,EAAE,EAAEE,OAAQ;IACZD,IAAI,EAAEA,IAAK;IACXN,KAAK,EAAEQ,UAAW;IAClBP,QAAQ,EAAGoB,KAAK,IAAKJ,YAAY,CAACI,KAAK,CAACC,MAAM,CAACtB,KAAK,CAAE;IACtDG,QAAQ,EAAEA,QAAS;IACnBC,QAAQ,EAAEA,QAAS;IACnBe,SAAS,EAAC;EAAgC,CAC1C,CACG,CAAC;AAER,CAAC;AAED,iEAAexB,2CAAI,CAACG,UAAU,CAAC;;;;;;;;;;;AC5D/B","sources":["webpack://complianz-gdpr/./src/Settings/Inputs/PhoneInput.js","webpack://complianz-gdpr/./src/Settings/Inputs/Input.scss?1cff"],"sourcesContent":["import {memo, useEffect, useState} from 'react';\nimport './Input.scss';\n\nconst PhoneInput = ({\n\tvalue,\n\tonChange,\n\tonError,\n\trequired,\n\tdisabled,\n\tid,\n\tname,\n}) => {\n\tconst inputId = id || name;\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst isValidPhone = (string) => {\n\t\tvar res = string.match(/^\\+?[\\d\\-\\(\\)\\s]*$/);\n\t\treturn (res !== null)\n\t};\n\n\t//ensure that the initial value is set\n\tuseEffect(() => {\n\t\tif (!value) value = '';\n\t\tsetInputValue(value);\n\t},[]);\n\n\t//because an update on the entire Fields array is costly, we only update after the user has stopped typing\n\tuseEffect(() => {\n\t\tconst typingTimer = setTimeout(() => {\n\t\t\tonChange(inputValue);\n\t\t\tif (!isValidPhone(inputValue)) {\n\t\t\t\tonError('invalid_phone');\n\t\t\t}\n\t\t}, 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(typingTimer);\n\t\t};\n\t}, [inputValue]);\n\n\tconst handleChange = ( value ) => {\n\t\tsetInputValue(value);\n\t};\n\n\treturn (\n\t\t<div className=\"cmplz-input-group cmplz-phone-input-group\">\n\t\t\t<input\n\t\t\t\ttype='tel'\n\t\t\t\tid={inputId}\n\t\t\t\tname={name}\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={(event) => handleChange(event.target.value)}\n\t\t\t\trequired={required}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName=\"cmplz-phone-input-group__input\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default memo(PhoneInput);\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["memo","useEffect","useState","PhoneInput","_ref","value","onChange","onError","required","disabled","id","name","inputId","inputValue","setInputValue","isValidPhone","string","res","match","typingTimer","setTimeout","clearTimeout","handleChange","createElement","className","type","event","target"],"sourceRoot":""}