{"version":3,"file":"src_Settings_DataBreachReports_DataBreachReportsData_js.js","mappings":"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","sources":["webpack://complianz-gdpr/./src/Settings/DataBreachReports/DataBreachReportsData.js"],"sourcesContent":["import {create} from 'zustand';\nimport produce from 'immer';\nimport * as cmplz_api from \"../../utils/api\";\nimport {updateFieldsListWithConditions} from \"../../utils/updateFieldsListWithConditions\";\n\nconst useDataBreachReportsData = create(( set, get ) => ({\n\tdocumentsLoaded: false,\n\tsavedDocument:{},\n\tconclusions:[],\n\tregion: '',\n\tfileName: '',\n\tfetching:false,\n\tupdating:false,\n\tloadingFields:false,\n\tdocuments: [],\n\tregions: [],\n\tfields: [],\n\teditDocumentId:false,\n\tresetEditDocumentId: (id) => {\n\t\tset({editDocumentId:false, region:''});\n\t},\n\teditDocument: async (e, id) => {\n\t\te.preventDefault();\n\t\tset({updating:true});\n\t\tawait cmplz_api.doAction('load_databreach_report', {id: id}).then((response) => {\n\t\t\tset({fields:response.fields,region:response.region,updating:false,fileName:response.file_name});\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t\tset({editDocumentId:id});\n\t},\n\tsetRegion: (region) => {\n\t\tset({region:region});\n\t},\n\tupdateField: (id, value) => {\n\t\tlet found=false;\n\t\tlet index = false;\n\t\tset(\n\t\t\tproduce((state) => {\n\t\t\t\tstate.fields.forEach(function(fieldItem, i) {\n\t\t\t\t\tif (fieldItem.id === id ){\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\tfound=true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (index!==false) state.fields[index].value = value;\n\t\t\t})\n\t\t)\n\t\tlet newFields = updateFieldsListWithConditions(get().fields);\n\t\tset({fields:newFields});\n\t},\n\tsave: async ( region ) => {\n\t\tset({updating:true});\n\t\tlet postId = get().editDocumentId;\n\t\tlet savedDocumentId = 0;\n\t\tawait cmplz_api.doAction('save_databreach_report', {fields: get().fields, region: region,post_id:postId}).then((response) => {\n\t\t\tsavedDocumentId = response.post_id;\n\t\t\tset({updating:false,conclusions:response.conclusions});\n\t\t\treturn response;\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t\tawait get().fetchData();\n\t\tlet documents = get().documents;\n\t\tlet savedDocuments = documents.filter(document => document.id === savedDocumentId);\n\t\tif (savedDocuments.length>0) {\n\t\t\tset({savedDocument:savedDocuments[0]})\n\t\t}\n\n\t},\n\tdeleteDocuments: async ( ids ) => {\n\t\t//get array of documents to delete\n\t\tlet deleteDocuments = get().documents.filter(document => ids.includes(document.id));\n\t\t//remove the ids from the documents array\n\t\tset((state) => ({\n\t\t\tdocuments: state.documents.filter(document => !ids.includes(document.id)),\n\t\t}));\n\t\tlet data = {};\n\t\tdata.documents = deleteDocuments;\n\t\tawait cmplz_api.doAction('delete_databreach_report', data).then((response) => {\n\t\t\treturn response;\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t},\n\tfetchData: async ( ) => {\n\t\tif (get().fetching) return;\n\t\tset({fetching:true});\n\t\tlet data = {}\n\t\tconst { documents,regions } = await cmplz_api.doAction('get_databreach_reports', data).then((response) => {\n\t\t\treturn response;\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t\tset((state) => ({\n\t\t\tdocumentsLoaded: true,\n\t\t\tdocuments: documents,\n\t\t\tregions: regions,\n\t\t\tfetching:false,\n\t\t}));\n\t},\n\tfetchFields: async ( region ) => {\n\t\tlet data = {region:region}\n\t\tset({loadingFields:true});\n\t\tconst { fields } = await cmplz_api.doAction('get_databreach_report_fields', data).then((response) => {\n\t\t\treturn response;\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t\tlet newFields = updateFieldsListWithConditions(fields);\n\t\tset((state) => ({\n\t\t\tfields: newFields,\n\t\t\tloadingFields:false,\n\t\t}));\n\t},\n}));\n\nexport default useDataBreachReportsData;\n"],"names":["create","produce","cmplz_api","updateFieldsListWithConditions","useDataBreachReportsData","set","get","documentsLoaded","savedDocument","conclusions","region","fileName","fetching","updating","loadingFields","documents","regions","fields","editDocumentId","resetEditDocumentId","id","editDocument","e","preventDefault","doAction","then","response","file_name","catch","error","console","setRegion","updateField","value","found","index","state","forEach","fieldItem","i","newFields","save","postId","savedDocumentId","post_id","fetchData","savedDocuments","filter","document","length","deleteDocuments","ids","includes","data","fetchFields"],"sourceRoot":""}