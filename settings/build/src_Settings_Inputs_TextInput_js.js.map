{"version":3,"file":"src_Settings_Inputs_TextInput_js.js","mappings":";;;;;;;;;;;;;;;;;;;AAAgD;AAC1B;AAEtB,MAAMG,SAAS,GAAGC,IAAA,IASZ;EAAA,IATa;IAClBC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,QAAQ;IACRC,EAAE;IACFC,IAAI;IACJC;EACD,CAAC,GAAAR,IAAA;EACA,MAAMS,OAAO,GAAGH,EAAE,IAAIC,IAAI;EAC1B,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGb,+CAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAD,gDAAS,CAAC,MAAM;IACfc,aAAa,CAACV,KAAK,IAAI,EAAE,CAAC;EAC3B,CAAC,EAAC,CAACA,KAAK,CAAC,CAAC;;EAEV;EACAJ,gDAAS,CAAC,MAAM;IACf;IACA,MAAMe,WAAW,GAAGC,UAAU,CAAC,MAAM;MACpCX,QAAQ,CAACQ,UAAU,CAAC;IACrB,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MACZI,YAAY,CAACF,WAAW,CAAC;IAC1B,CAAC;EACF,CAAC,EAAE,CAACF,UAAU,CAAC,CAAC;EAEhB,MAAMK,YAAY,GAAKd,KAAK,IAAM;IACjCU,aAAa,CAACV,KAAK,CAAC;EACrB,CAAC;EAED,OACCe,iEAAA;IAAKC,SAAS,EAAC;EAA0C,GACxDD,iEAAA;IACCE,IAAI,EAAC,MAAM;IACXZ,EAAE,EAAEG,OAAQ;IACZF,IAAI,EAAEA,IAAK;IACXN,KAAK,EAAES,UAAW;IAClBR,QAAQ,EAAGiB,KAAK,IAAKJ,YAAY,CAACI,KAAK,CAACC,MAAM,CAACnB,KAAK,CAAE;IACtDE,QAAQ,EAAEA,QAAS;IACnBE,QAAQ,EAAEA,QAAS;IACnBY,SAAS,EAAC,+BAA+B;IACzCT,WAAW,EAAEA;EAAY,CACzB,CACG,CAAC;AAER,CAAC;AAED,iEAAeZ,2CAAI,CAACG,SAAS,CAAC;;;;;;;;;;;ACtD9B","sources":["webpack://complianz-gdpr/./src/Settings/Inputs/TextInput.js","webpack://complianz-gdpr/./src/Settings/Inputs/Input.scss?1cff"],"sourcesContent":["import {memo, useEffect, useState} from 'react';\nimport './Input.scss';\n\nconst TextInput = ({\n\tvalue,\n\tonChange,\n\trequired,\n\tdefaultValue,\n\tdisabled,\n\tid,\n\tname,\n\tplaceholder\n}) => {\n\tconst inputId = id || name;\n\tconst [inputValue, setInputValue] = useState('');\n\n\t//ensure that the initial value is set\n\tuseEffect(() => {\n\t\tsetInputValue(value || '');\n\t},[value]);\n\n\t//because an update on the entire Fields array is costly, we only update after the user has stopped typing\n\tuseEffect(() => {\n\t\t// skip first render\n\t\tconst typingTimer = setTimeout(() => {\n\t\t\tonChange(inputValue);\n\t\t}, 500);\n\n\t\treturn () => {\n\t\t\tclearTimeout(typingTimer);\n\t\t};\n\t}, [inputValue]);\n\n\tconst handleChange = ( value ) => {\n\t\tsetInputValue(value);\n\t};\n\n\treturn (\n\t\t<div className=\"cmplz-input-group cmplz-text-input-group\">\n\t\t\t<input\n\t\t\t\ttype='text'\n\t\t\t\tid={inputId}\n\t\t\t\tname={name}\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={(event) => handleChange(event.target.value)}\n\t\t\t\trequired={required}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName=\"cmplz-text-input-group__input\"\n\t\t\t\tplaceholder={placeholder}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default memo(TextInput);\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["memo","useEffect","useState","TextInput","_ref","value","onChange","required","defaultValue","disabled","id","name","placeholder","inputId","inputValue","setInputValue","typingTimer","setTimeout","clearTimeout","handleChange","createElement","className","type","event","target"],"sourceRoot":""}